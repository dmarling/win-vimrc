
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" P L U G I N S - P L U G I N S - P L U G I N S - P L U G I N S - P L U G I N S - P L U G I N S - P L U G I  "
"                                                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"plugins have been manually installed and are accessible with the 'help [name of plugin]'
"documentation has been generated by 1) navigate to doc parent directory. Run inside editor 'helptags doc' 
"
"	Tabular             - For formatting data into columns based on a flexible delimiter
"	SuperTab            - Binds tab key to use complete 
"       NERDTree            - Replaces netrw as file explorer
"	Surround            - Extended vim motions for parenthese,quotes,brackets etc...
"	Repeat              - So Surround can repeat
"       Commentary          - Universal comment commands
"       Fugitive            - Git integration
"       GitGutter           - Git line status in the gutter
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  G E N E R A L - S E T T I N G S - G E N E R A L - S E T T I N G S - G E N E R A L - S E T T I N G S -  G  "
"                                                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
syntax enable
set nocompatible
set nu
set relativenumber
set laststatus=2
set showcmd
set ruler
set splitright
set splitbelow
set autochdir
set autoindent
set nowrap "prevents visual line wrapping
set textwidth=0 "prevents literal line wrapping
set so=3
set gdefault
set completeopt=longest,menuone
set shiftwidth=4
set softtabstop=4
set foldmethod=manual
set cursorline
set foldopen-=block "skip over folded blocks with nav '{' cmds
set showtabline=0 "hide tabnames at top of doc
set backspace=indent,eol,start "fix backspace key to act conventionally
set expandtab "convert tabs to spaces automatically
set guifont=Lucida\ Console:h10
set virtualedit=onemore "use g$ to access end of virtualedit line and $ for actual end of line
"search settings
set nohlsearch
set incsearch
set ignorecase
set smartcase
"navigate away from open/unsaved buffers without warnings
set noswapfile
set nobackup
set hidden
"gui options
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set mouse=c        "disable mouse
"filetype settings
autocmd BufNewFile,BufRead *.ddl,*.sql set filetype=sql
autocmd BufNewFile,BufRead *.py set filetype=python
autocmd BufNewFile,BufRead *.xml set filetype=xml 
autocmd BufNewFile,BufRead *.json set filetype=json
autocmd FileType xml setlocal sw=8 sts=8 fdm=syntax norelativenumber
let g:xml_syntax_folding=1
autocmd FileType sql setlocal sw=8 sts=8 noexpandtab
"terminal setting commented out for now
"autocmd TerminalOpen * if bufwinnr('') > 0 | setlocal nobuflisted | endif "hide terminal from tab/s-tab buffer navigation

"Settings With Dependencies:
"status line 
set statusline=\ %{fugitive#statusline()}   "git info
set statusline+=\ [%{&fileformat}\]         "filetype -effectively a DOS/UNIX flag
set statusline+=\ %.75F                     "filename truncated to 60 characters
set statusline+=\%m\ %r                     "modified/read-only flags
set statusline+=\%=%c                       "column number aligned to the right
"colorscheme 
colorscheme gotham
set background=dark
highlight DiffText guifg=Red
let g:gitgutter_sign_added='A'
let g:gitgutter_sign_modified='M'
let g:gitgutter_sign_removed='D'
let g:gitgutter_sign_removed_first_line='^^'
let g:gitgutter_sign_modified_removed='MD'
autocmd VimEnter * NERDTree
autocmd VimEnter * set winfixwidth  "tbd should prevent the nerdtree window from resizing
let NERDTreeIgnore=['\.pol$','\.regtrans-ms$','\.blf$','\.pyc'] "prevent certain files from showing up in NerdTree file explorer
let NERDTreeQuitOnOpen=1
let g:NERDTreeMapPreview='p'
let g:NERDTreeMapUpDir='-'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  M A P S - M A P S - M A P S - M A P S - M A P S - M A P S - M A P S - M A P S - M A P S -  M A P S - M A  " 
"                                                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pnemonic Key: 
" bd - 'buffer delete'          --closes window and buffer
" br - 'buffer replace'         --closes buffer but leaves window open and cycles to previous buffer
" st - 'source this'            --sources current file
" do - 'diff off'               --turns diff off of current buffer
" dt - 'diff this'              --turns diff on current buffer
" hl - 'high light'             --toggles highlight search off/on
" sw - 'setwrap'                --toggles linewrap search off/on
" sb - 'show buffers'           --toggles quickfix list populated with buffers
" qf - 'quick fix'              --toggles quickfix list 
" sv - 'show vimrc'             --opens vimrc
" fs - 'full screen'            --must be toggled from a windowed mode e.g. vanilla startup
" hs - 'half screen'            --must be toggled from full screen mode
" gs - 'Gstatus'                --fugitive plugin shortcut to toggle git status
" fe - 'file explorer'          --open nerdtree
" zt - 'zoom toggle'            --open new tab with current buffer
" ws = 'windows swap'           --swap buffers between current window and previous window
" 
inoremap jk <Esc>
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>
nnoremap <leader>be :Listbufs<CR>:buffer<Space>
" when list buffs grows beyond 1 page quickfix window is better
nnoremap <F2> <Esc>:Bufs2QFix()<CR> 
nnoremap <F3> :set lines=999 columns=999<CR>
nnoremap <F4> :set paste!<CR>
nnoremap <leader>bd :bd!<CR>        
nnoremap <leader>br :bn\|bd! #<CR>      
nnoremap <leader>w :w!<CR>
nnoremap <leader>st :w\|source %<CR>
nnoremap <leader>do :diffo<CR>
nnoremap <leader>dt :difft<CR>
nnoremap <leader>hl :set hlsearch!<CR>
nnoremap <leader>sw :set wrap!<CR>
nnoremap <leader>sv :e ~/.vimrc<CR>
nnoremap <leader>qf <Esc>:QFT()<CR>
nnoremap <leader>zt :tabe %<CR>
" nnoremap <leader>fe :Vex<CR> 
nnoremap j gj
nnoremap k gk
vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'
"for copying from gvim to external programs instead of setting clipboard unnamed which slows down macros
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <Leader>ws <C-c>:call WinBufSwap()<CR>
"Maps With Dependencies:
nnoremap <leader>fe :NERDTreeToggle<CR> 
nnoremap <leader>gs :call ToggleGStatus()<CR>
nnoremap <leader>fs :call libcallnr("gvimfullscreen_64.dll", "ToggleFullScreen", 0)<CR>
nnoremap <leader>hs :call libcallnr("gvimfullscreen_64.dll", "ToggleFullScreen", 0)<CR>:set columns=130<CR><C-W>=
nmap <Leader>T= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>T= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>T: :Tabularize /:<CR>
vmap <Leader>T: :Tabularize /:<CR>
nmap <Leader>T:: :Tabularize /:\zs<CR>
vmap <Leader>T:: :Tabularize /:\zs<CR>
nmap <Leader>T, :Tabularize /,<CR>
vmap <Leader>T, :Tabularize /,<CR>
nmap <Leader>T,, :Tabularize /,\zs<CR>
vmap <Leader>T,, :Tabularize /,\zs<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" C O M M A N D S - C O M M A N D S - C O M M A N D S  C O M M A N D S - C O M M A N D S - C O M M A N D S   "
"                                                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -nargs=* Vgrep execute 'normal c' | execute 'vimgrep <args>' | :vert cw | :vertical resize 70
command! -nargs=* READSTDOUT execute 'vnew | r! <args>'
command! Listbufs call CleanBufferNav()
command! -nargs=1 SearchBuffers call setqflist([]) | execute 'bufdo vimgrepadd' . (<f-args>) . ' %' | copen
command! -nargs=1 Vres execute 'vertical resize <args>' | set winfixwidth
command! BigFileSettings execute set nocursorline | :set norelativenumber | :syntax off
command! XMLPrettyPrint set filetype=xml | %s/></>\r</ | execute 'normal gg=G' 
command! XMLPrettyPrintCollapse execute ':%s/^\s\+//' | execute ':%s/\n//'
"Commands With Dependencies:
command! JSONPrettyPrint set filetype=json | %!python -m json.tool 
command! PrdHiveRun execute 'w C:\Users\dmarling\Desktop\scripts\prdquery.sql' | execute '!python C:\Users\dmarling\Desktop\scripts\execute_arbitrary_hive_script.py C:\Users\dmarling\Desktop\scripts\prdquery.sql'
command! DevHiveRun execute 'w C:\Users\dmarling\Desktop\scripts\devquery.sql' | execute 'vnew | r! python C:\Users\dmarling\Desktop\scripts\devquery.py C:\Users\dmarling\Desktop\scripts\devquery.sql'
command! StgHiveRun execute 'w C:\Users\dmarling\Desktop\scripts\stgquery.sql' | execute '!python C:\Users\dmarling\Desktop\scripts\ C:\Users\dmarling\Desktop\scripts\stgquery.sql'
command! -nargs=* PrdHiveMetaStore execute 'vnew | r! python C:\Users\dmarling\Desktop\scripts\vim_call_prd_hive_metastore.py <args>' | execute '%s/[()]//' 
command! -nargs=* DevHiveMetaStore execute 'vnew | r! python C:\Users\dmarling\Desktop\scripts\vim_call_dev_hive_metastore.py <args>' | execute '%s/[()]//' 
command! -nargs=* StgHiveMetaStore execute 'vnew | r! python C:\Users\dmarling\Desktop\scripts\vim_call_stg_hive_metastore.py <args>' | execute '%s/[()]//'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" F U N C T I O N S - F U N C T I O N S - F U N C T I O N S -F U N C T I O N S - F U N C T I O N S - F U N   "
"                                                                                                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"parses a buffer list supports tab completion 
"but requires to page through results with spacebar when buffers are many
function! CleanBufferNav()
    redir => ls_output
    silent exec 'ls'
    redir END
    let list = substitute(ls_output, '"\([a-zA-Z0-9:\\_" .-]*\\\)\([a-zA-Z0-9:\\_" .-]*\)"' , '\=submatch(2)',  'g')
    let list = substitute(list, '\(\s\+line\s\+\d\+\)',  '', 'g')
    let list = substitute(list, '\(\d\+\s\+\)\(\S*\)', '\=submatch(1)."     "','g')
    echo list 
endfunction

" toggles the quickfix window.
command! -bang -nargs=? QFT call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
  else
    execute "copen " . 10
  endif
endfunction

" toggles the quickfix window after dumping buffers to it
command! -bang -nargs=? Bufs2QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
  else
    :call setqflist(map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), '{"bufnr":v:val}'))
    execute "copen " . 10
  endif
endfunction

" used to track the quickfix window
augroup QFixToggle
 autocmd!
 autocmd BufWinEnter quickfix let g:qfix_win = bufnr("$")
 autocmd BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
augroup END

" used to switch buffers in windows in complex vertical/horizontal arrangements
function! WinBufSwap()
  let thiswin = winnr()
  let thisbuf = bufnr("%")
  let lastwin = winnr("#")
  let lastbuf = winbufnr(lastwin)

  exec  lastwin . " wincmd w" ."|".
      \ "buffer ". thisbuf ."|".
      \ thiswin ." wincmd w" ."|".
      \ "buffer ". lastbuf
endfunction

"Functions With Dependecies:
" toggles git status with fugitive plugin
function! ToggleGStatus()
    if buflisted(bufname('.git/index'))
        bd .git/index
    else
        Gstatus
    endif
endfunction


packadd! matchit " matchit can match xml angle brackets with % and I'm sure other things

